-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AXIvideo2Mat is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    AXI_video_strm_V_data_V_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    AXI_video_strm_V_data_V_empty_n : IN STD_LOGIC;
    AXI_video_strm_V_data_V_read : OUT STD_LOGIC;
    AXI_video_strm_V_keep_V_dout : IN STD_LOGIC_VECTOR (2 downto 0);
    AXI_video_strm_V_keep_V_empty_n : IN STD_LOGIC;
    AXI_video_strm_V_keep_V_read : OUT STD_LOGIC;
    AXI_video_strm_V_strb_V_dout : IN STD_LOGIC_VECTOR (2 downto 0);
    AXI_video_strm_V_strb_V_empty_n : IN STD_LOGIC;
    AXI_video_strm_V_strb_V_read : OUT STD_LOGIC;
    AXI_video_strm_V_user_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    AXI_video_strm_V_user_V_empty_n : IN STD_LOGIC;
    AXI_video_strm_V_user_V_read : OUT STD_LOGIC;
    AXI_video_strm_V_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    AXI_video_strm_V_last_V_empty_n : IN STD_LOGIC;
    AXI_video_strm_V_last_V_read : OUT STD_LOGIC;
    AXI_video_strm_V_id_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    AXI_video_strm_V_id_V_empty_n : IN STD_LOGIC;
    AXI_video_strm_V_id_V_read : OUT STD_LOGIC;
    AXI_video_strm_V_dest_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    AXI_video_strm_V_dest_V_empty_n : IN STD_LOGIC;
    AXI_video_strm_V_dest_V_read : OUT STD_LOGIC;
    img_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    img_rows_V_empty_n : IN STD_LOGIC;
    img_rows_V_read : OUT STD_LOGIC;
    img_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    img_cols_V_empty_n : IN STD_LOGIC;
    img_cols_V_read : OUT STD_LOGIC;
    img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_0_V_full_n : IN STD_LOGIC;
    img_data_stream_0_V_write : OUT STD_LOGIC;
    img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_1_V_full_n : IN STD_LOGIC;
    img_data_stream_1_V_write : OUT STD_LOGIC;
    img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_2_V_full_n : IN STD_LOGIC;
    img_data_stream_2_V_write : OUT STD_LOGIC;
    img_rows_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    img_rows_V_out_full_n : IN STD_LOGIC;
    img_rows_V_out_write : OUT STD_LOGIC;
    img_cols_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    img_cols_V_out_full_n : IN STD_LOGIC;
    img_cols_V_out_write : OUT STD_LOGIC );
end;


architecture behav of AXIvideo2Mat is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal AXI_video_strm_V_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond_i_reg_427 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_phi_mux_eol_2_i_phi_fu_299_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_video_strm_V_keep_V_blk_n : STD_LOGIC;
    signal AXI_video_strm_V_strb_V_blk_n : STD_LOGIC;
    signal AXI_video_strm_V_user_V_blk_n : STD_LOGIC;
    signal AXI_video_strm_V_last_V_blk_n : STD_LOGIC;
    signal AXI_video_strm_V_id_V_blk_n : STD_LOGIC;
    signal AXI_video_strm_V_dest_V_blk_n : STD_LOGIC;
    signal img_rows_V_blk_n : STD_LOGIC;
    signal img_cols_V_blk_n : STD_LOGIC;
    signal img_data_stream_0_V_blk_n : STD_LOGIC;
    signal img_data_stream_1_V_blk_n : STD_LOGIC;
    signal img_data_stream_2_V_blk_n : STD_LOGIC;
    signal img_rows_V_out_blk_n : STD_LOGIC;
    signal img_cols_V_out_blk_n : STD_LOGIC;
    signal t_V_3_reg_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal eol_reg_213 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_data_V_1_i_reg_224 : STD_LOGIC_VECTOR (23 downto 0);
    signal eol_i_reg_235 : STD_LOGIC_VECTOR (0 downto 0);
    signal rows_V_reg_388 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal cols_V_reg_393 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_398 : STD_LOGIC_VECTOR (23 downto 0);
    signal AXI_video_strm_V_id_V0_status : STD_LOGIC;
    signal tmp_last_V_reg_406 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond5_i_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_V_fu_330_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_V_reg_422 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_i_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op74_read_state6 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal j_V_fu_341_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state8 : BOOLEAN;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal axi_last_V_3_i_reg_272 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V1_i_reg_171 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal axi_data_V_3_i_reg_284 : STD_LOGIC_VECTOR (23 downto 0);
    signal axi_data_V1_i_reg_181 : STD_LOGIC_VECTOR (23 downto 0);
    signal t_V_reg_191 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_axi_last_V_2_i_phi_fu_252_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_p_Val2_s_phi_fu_264_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_phi_reg_pp1_iter1_axi_last_V_2_i_reg_247 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp1_iter1_p_Val2_s_reg_260 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal eol_2_i_reg_296 : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_video_strm_V_id_V0_update : STD_LOGIC;
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal sof_1_i_fu_100 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_fu_316_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_condition_149 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond5_i_fu_325_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_i_fu_336_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond5_i_fu_325_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond5_i_fu_325_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    axi_data_V1_i_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                axi_data_V1_i_reg_181 <= tmp_data_V_reg_398;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                axi_data_V1_i_reg_181 <= axi_data_V_3_i_reg_284;
            end if; 
        end if;
    end process;

    axi_data_V_1_i_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_i_reg_427 = ap_const_lv1_0))) then 
                axi_data_V_1_i_reg_224 <= ap_phi_mux_p_Val2_s_phi_fu_264_p4;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond5_i_fu_325_p2 = ap_const_lv1_0))) then 
                axi_data_V_1_i_reg_224 <= axi_data_V1_i_reg_181;
            end if; 
        end if;
    end process;

    axi_data_V_3_i_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                axi_data_V_3_i_reg_284 <= axi_data_V_1_i_reg_224;
            elsif ((not(((ap_const_logic_0 = AXI_video_strm_V_id_V0_status) and (eol_2_i_reg_296 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state8) and (eol_2_i_reg_296 = ap_const_lv1_0))) then 
                axi_data_V_3_i_reg_284 <= AXI_video_strm_V_data_V_dout;
            end if; 
        end if;
    end process;

    axi_last_V1_i_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                axi_last_V1_i_reg_171 <= tmp_last_V_reg_406;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                axi_last_V1_i_reg_171 <= axi_last_V_3_i_reg_272;
            end if; 
        end if;
    end process;

    axi_last_V_3_i_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                axi_last_V_3_i_reg_272 <= eol_reg_213;
            elsif ((not(((ap_const_logic_0 = AXI_video_strm_V_id_V0_status) and (eol_2_i_reg_296 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state8) and (eol_2_i_reg_296 = ap_const_lv1_0))) then 
                axi_last_V_3_i_reg_272 <= AXI_video_strm_V_last_V_dout;
            end if; 
        end if;
    end process;

    eol_2_i_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                eol_2_i_reg_296 <= eol_i_reg_235;
            elsif ((not(((ap_const_logic_0 = AXI_video_strm_V_id_V0_status) and (eol_2_i_reg_296 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state8) and (eol_2_i_reg_296 = ap_const_lv1_0))) then 
                eol_2_i_reg_296 <= AXI_video_strm_V_last_V_dout;
            end if; 
        end if;
    end process;

    eol_i_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_i_reg_427 = ap_const_lv1_0))) then 
                eol_i_reg_235 <= ap_phi_mux_axi_last_V_2_i_phi_fu_252_p4;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond5_i_fu_325_p2 = ap_const_lv1_0))) then 
                eol_i_reg_235 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    eol_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_i_reg_427 = ap_const_lv1_0))) then 
                eol_reg_213 <= ap_phi_mux_axi_last_V_2_i_phi_fu_252_p4;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond5_i_fu_325_p2 = ap_const_lv1_0))) then 
                eol_reg_213 <= axi_last_V1_i_reg_171;
            end if; 
        end if;
    end process;

    sof_1_i_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_i_reg_427 = ap_const_lv1_0))) then 
                sof_1_i_fu_100 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                sof_1_i_fu_100 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    t_V_3_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_i_fu_336_p2 = ap_const_lv1_0))) then 
                t_V_3_reg_202 <= j_V_fu_341_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond5_i_fu_325_p2 = ap_const_lv1_0))) then 
                t_V_3_reg_202 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    t_V_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                t_V_reg_191 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                t_V_reg_191 <= i_V_reg_422;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((img_cols_V_out_full_n = ap_const_logic_0) or (img_rows_V_out_full_n = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (img_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                cols_V_reg_393 <= img_cols_V_dout;
                rows_V_reg_388 <= img_rows_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond_i_reg_427 <= exitcond_i_fu_336_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_V_reg_422 <= i_V_fu_330_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = AXI_video_strm_V_id_V0_status))) then
                tmp_data_V_reg_398 <= AXI_video_strm_V_data_V_dout;
                tmp_last_V_reg_406 <= AXI_video_strm_V_last_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, img_rows_V_empty_n, img_cols_V_empty_n, img_rows_V_out_full_n, img_cols_V_out_full_n, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state8, ap_phi_mux_eol_2_i_phi_fu_299_p4, AXI_video_strm_V_id_V0_status, exitcond5_i_fu_325_p2, ap_CS_fsm_state4, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_subdone, eol_2_i_reg_296, tmp_user_V_fu_316_p1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((img_cols_V_out_full_n = ap_const_logic_0) or (img_rows_V_out_full_n = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (img_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = AXI_video_strm_V_id_V0_status) and (tmp_user_V_fu_316_p1 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((tmp_user_V_fu_316_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = AXI_video_strm_V_id_V0_status))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond5_i_fu_325_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if ((not(((ap_const_logic_0 = AXI_video_strm_V_id_V0_status) and (eol_2_i_reg_296 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state8) and (eol_2_i_reg_296 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif ((not(((ap_const_logic_0 = AXI_video_strm_V_id_V0_status) and (eol_2_i_reg_296 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state8) and (ap_phi_mux_eol_2_i_phi_fu_299_p4 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    AXI_video_strm_V_data_V_blk_n_assign_proc : process(AXI_video_strm_V_data_V_empty_n, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_i_reg_427, brmerge_i_fu_350_p2, ap_CS_fsm_state8, eol_2_i_reg_296)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (eol_2_i_reg_296 = ap_const_lv1_0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (brmerge_i_fu_350_p2 = ap_const_lv1_0) and (exitcond_i_reg_427 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0)))) then 
            AXI_video_strm_V_data_V_blk_n <= AXI_video_strm_V_data_V_empty_n;
        else 
            AXI_video_strm_V_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    AXI_video_strm_V_data_V_read <= AXI_video_strm_V_id_V0_update;

    AXI_video_strm_V_dest_V_blk_n_assign_proc : process(AXI_video_strm_V_dest_V_empty_n, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_i_reg_427, brmerge_i_fu_350_p2, ap_CS_fsm_state8, eol_2_i_reg_296)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (eol_2_i_reg_296 = ap_const_lv1_0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (brmerge_i_fu_350_p2 = ap_const_lv1_0) and (exitcond_i_reg_427 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0)))) then 
            AXI_video_strm_V_dest_V_blk_n <= AXI_video_strm_V_dest_V_empty_n;
        else 
            AXI_video_strm_V_dest_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    AXI_video_strm_V_dest_V_read <= AXI_video_strm_V_id_V0_update;
    AXI_video_strm_V_id_V0_status <= (AXI_video_strm_V_user_V_empty_n and AXI_video_strm_V_strb_V_empty_n and AXI_video_strm_V_last_V_empty_n and AXI_video_strm_V_keep_V_empty_n and AXI_video_strm_V_id_V_empty_n and AXI_video_strm_V_dest_V_empty_n and AXI_video_strm_V_data_V_empty_n);

    AXI_video_strm_V_id_V0_update_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state8, AXI_video_strm_V_id_V0_status, ap_predicate_op74_read_state6, ap_block_pp1_stage0_11001, eol_2_i_reg_296)
    begin
        if (((not(((ap_const_logic_0 = AXI_video_strm_V_id_V0_status) and (eol_2_i_reg_296 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state8) and (eol_2_i_reg_296 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_predicate_op74_read_state6 = ap_const_boolean_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = AXI_video_strm_V_id_V0_status)))) then 
            AXI_video_strm_V_id_V0_update <= ap_const_logic_1;
        else 
            AXI_video_strm_V_id_V0_update <= ap_const_logic_0;
        end if; 
    end process;


    AXI_video_strm_V_id_V_blk_n_assign_proc : process(AXI_video_strm_V_id_V_empty_n, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_i_reg_427, brmerge_i_fu_350_p2, ap_CS_fsm_state8, eol_2_i_reg_296)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (eol_2_i_reg_296 = ap_const_lv1_0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (brmerge_i_fu_350_p2 = ap_const_lv1_0) and (exitcond_i_reg_427 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0)))) then 
            AXI_video_strm_V_id_V_blk_n <= AXI_video_strm_V_id_V_empty_n;
        else 
            AXI_video_strm_V_id_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    AXI_video_strm_V_id_V_read <= AXI_video_strm_V_id_V0_update;

    AXI_video_strm_V_keep_V_blk_n_assign_proc : process(AXI_video_strm_V_keep_V_empty_n, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_i_reg_427, brmerge_i_fu_350_p2, ap_CS_fsm_state8, eol_2_i_reg_296)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (eol_2_i_reg_296 = ap_const_lv1_0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (brmerge_i_fu_350_p2 = ap_const_lv1_0) and (exitcond_i_reg_427 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0)))) then 
            AXI_video_strm_V_keep_V_blk_n <= AXI_video_strm_V_keep_V_empty_n;
        else 
            AXI_video_strm_V_keep_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    AXI_video_strm_V_keep_V_read <= AXI_video_strm_V_id_V0_update;

    AXI_video_strm_V_last_V_blk_n_assign_proc : process(AXI_video_strm_V_last_V_empty_n, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_i_reg_427, brmerge_i_fu_350_p2, ap_CS_fsm_state8, eol_2_i_reg_296)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (eol_2_i_reg_296 = ap_const_lv1_0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (brmerge_i_fu_350_p2 = ap_const_lv1_0) and (exitcond_i_reg_427 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0)))) then 
            AXI_video_strm_V_last_V_blk_n <= AXI_video_strm_V_last_V_empty_n;
        else 
            AXI_video_strm_V_last_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    AXI_video_strm_V_last_V_read <= AXI_video_strm_V_id_V0_update;

    AXI_video_strm_V_strb_V_blk_n_assign_proc : process(AXI_video_strm_V_strb_V_empty_n, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_i_reg_427, brmerge_i_fu_350_p2, ap_CS_fsm_state8, eol_2_i_reg_296)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (eol_2_i_reg_296 = ap_const_lv1_0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (brmerge_i_fu_350_p2 = ap_const_lv1_0) and (exitcond_i_reg_427 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0)))) then 
            AXI_video_strm_V_strb_V_blk_n <= AXI_video_strm_V_strb_V_empty_n;
        else 
            AXI_video_strm_V_strb_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    AXI_video_strm_V_strb_V_read <= AXI_video_strm_V_id_V0_update;

    AXI_video_strm_V_user_V_blk_n_assign_proc : process(AXI_video_strm_V_user_V_empty_n, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_i_reg_427, brmerge_i_fu_350_p2, ap_CS_fsm_state8, eol_2_i_reg_296)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (eol_2_i_reg_296 = ap_const_lv1_0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (brmerge_i_fu_350_p2 = ap_const_lv1_0) and (exitcond_i_reg_427 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0)))) then 
            AXI_video_strm_V_user_V_blk_n <= AXI_video_strm_V_user_V_empty_n;
        else 
            AXI_video_strm_V_user_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    AXI_video_strm_V_user_V_read <= AXI_video_strm_V_id_V0_update;
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_01001_assign_proc : process(img_data_stream_0_V_full_n, img_data_stream_1_V_full_n, img_data_stream_2_V_full_n, ap_enable_reg_pp1_iter1, exitcond_i_reg_427, AXI_video_strm_V_id_V0_status, ap_predicate_op74_read_state6)
    begin
                ap_block_pp1_stage0_01001 <= ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (((ap_const_logic_0 = AXI_video_strm_V_id_V0_status) and (ap_predicate_op74_read_state6 = ap_const_boolean_1)) or ((img_data_stream_2_V_full_n = ap_const_logic_0) and (exitcond_i_reg_427 = ap_const_lv1_0)) or ((img_data_stream_1_V_full_n = ap_const_logic_0) and (exitcond_i_reg_427 = ap_const_lv1_0)) or ((img_data_stream_0_V_full_n = ap_const_logic_0) and (exitcond_i_reg_427 = ap_const_lv1_0))));
    end process;


    ap_block_pp1_stage0_11001_assign_proc : process(img_data_stream_0_V_full_n, img_data_stream_1_V_full_n, img_data_stream_2_V_full_n, ap_enable_reg_pp1_iter1, exitcond_i_reg_427, AXI_video_strm_V_id_V0_status, ap_predicate_op74_read_state6)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (((ap_const_logic_0 = AXI_video_strm_V_id_V0_status) and (ap_predicate_op74_read_state6 = ap_const_boolean_1)) or ((img_data_stream_2_V_full_n = ap_const_logic_0) and (exitcond_i_reg_427 = ap_const_lv1_0)) or ((img_data_stream_1_V_full_n = ap_const_logic_0) and (exitcond_i_reg_427 = ap_const_lv1_0)) or ((img_data_stream_0_V_full_n = ap_const_logic_0) and (exitcond_i_reg_427 = ap_const_lv1_0))));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(img_data_stream_0_V_full_n, img_data_stream_1_V_full_n, img_data_stream_2_V_full_n, ap_enable_reg_pp1_iter1, exitcond_i_reg_427, AXI_video_strm_V_id_V0_status, ap_predicate_op74_read_state6)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (((ap_const_logic_0 = AXI_video_strm_V_id_V0_status) and (ap_predicate_op74_read_state6 = ap_const_boolean_1)) or ((img_data_stream_2_V_full_n = ap_const_logic_0) and (exitcond_i_reg_427 = ap_const_lv1_0)) or ((img_data_stream_1_V_full_n = ap_const_logic_0) and (exitcond_i_reg_427 = ap_const_lv1_0)) or ((img_data_stream_0_V_full_n = ap_const_logic_0) and (exitcond_i_reg_427 = ap_const_lv1_0))));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, img_rows_V_empty_n, img_cols_V_empty_n, img_rows_V_out_full_n, img_cols_V_out_full_n)
    begin
                ap_block_state1 <= ((img_cols_V_out_full_n = ap_const_logic_0) or (img_rows_V_out_full_n = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (img_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state5_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp1_stage0_iter1_assign_proc : process(img_data_stream_0_V_full_n, img_data_stream_1_V_full_n, img_data_stream_2_V_full_n, exitcond_i_reg_427, AXI_video_strm_V_id_V0_status, ap_predicate_op74_read_state6)
    begin
                ap_block_state6_pp1_stage0_iter1 <= (((ap_const_logic_0 = AXI_video_strm_V_id_V0_status) and (ap_predicate_op74_read_state6 = ap_const_boolean_1)) or ((img_data_stream_2_V_full_n = ap_const_logic_0) and (exitcond_i_reg_427 = ap_const_lv1_0)) or ((img_data_stream_1_V_full_n = ap_const_logic_0) and (exitcond_i_reg_427 = ap_const_lv1_0)) or ((img_data_stream_0_V_full_n = ap_const_logic_0) and (exitcond_i_reg_427 = ap_const_lv1_0)));
    end process;


    ap_block_state8_assign_proc : process(AXI_video_strm_V_id_V0_status, eol_2_i_reg_296)
    begin
                ap_block_state8 <= ((ap_const_logic_0 = AXI_video_strm_V_id_V0_status) and (eol_2_i_reg_296 = ap_const_lv1_0));
    end process;


    ap_condition_149_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_i_reg_427)
    begin
                ap_condition_149 <= ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_i_reg_427 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, exitcond5_i_fu_325_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond5_i_fu_325_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_axi_last_V_2_i_phi_fu_252_p4_assign_proc : process(AXI_video_strm_V_last_V_dout, brmerge_i_fu_350_p2, eol_reg_213, ap_phi_reg_pp1_iter1_axi_last_V_2_i_reg_247, ap_condition_149)
    begin
        if ((ap_const_boolean_1 = ap_condition_149)) then
            if ((brmerge_i_fu_350_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_axi_last_V_2_i_phi_fu_252_p4 <= eol_reg_213;
            elsif ((brmerge_i_fu_350_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_axi_last_V_2_i_phi_fu_252_p4 <= AXI_video_strm_V_last_V_dout;
            else 
                ap_phi_mux_axi_last_V_2_i_phi_fu_252_p4 <= ap_phi_reg_pp1_iter1_axi_last_V_2_i_reg_247;
            end if;
        else 
            ap_phi_mux_axi_last_V_2_i_phi_fu_252_p4 <= ap_phi_reg_pp1_iter1_axi_last_V_2_i_reg_247;
        end if; 
    end process;

    ap_phi_mux_eol_2_i_phi_fu_299_p4 <= eol_2_i_reg_296;

    ap_phi_mux_p_Val2_s_phi_fu_264_p4_assign_proc : process(AXI_video_strm_V_data_V_dout, brmerge_i_fu_350_p2, axi_data_V_1_i_reg_224, ap_phi_reg_pp1_iter1_p_Val2_s_reg_260, ap_condition_149)
    begin
        if ((ap_const_boolean_1 = ap_condition_149)) then
            if ((brmerge_i_fu_350_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_p_Val2_s_phi_fu_264_p4 <= axi_data_V_1_i_reg_224;
            elsif ((brmerge_i_fu_350_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_p_Val2_s_phi_fu_264_p4 <= AXI_video_strm_V_data_V_dout;
            else 
                ap_phi_mux_p_Val2_s_phi_fu_264_p4 <= ap_phi_reg_pp1_iter1_p_Val2_s_reg_260;
            end if;
        else 
            ap_phi_mux_p_Val2_s_phi_fu_264_p4 <= ap_phi_reg_pp1_iter1_p_Val2_s_reg_260;
        end if; 
    end process;

    ap_phi_reg_pp1_iter1_axi_last_V_2_i_reg_247 <= "X";
    ap_phi_reg_pp1_iter1_p_Val2_s_reg_260 <= "XXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op74_read_state6_assign_proc : process(exitcond_i_reg_427, brmerge_i_fu_350_p2)
    begin
                ap_predicate_op74_read_state6 <= ((brmerge_i_fu_350_p2 = ap_const_lv1_0) and (exitcond_i_reg_427 = ap_const_lv1_0));
    end process;

    ap_ready <= internal_ap_ready;
    brmerge_i_fu_350_p2 <= (sof_1_i_fu_100 or eol_i_reg_235);
    exitcond5_i_fu_325_p2 <= "1" when (t_V_reg_191 = rows_V_reg_388) else "0";
    exitcond_i_fu_336_p2 <= "1" when (t_V_3_reg_202 = cols_V_reg_393) else "0";
    i_V_fu_330_p2 <= std_logic_vector(unsigned(t_V_reg_191) + unsigned(ap_const_lv32_1));

    img_cols_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_cols_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_cols_V_blk_n <= img_cols_V_empty_n;
        else 
            img_cols_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_cols_V_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_cols_V_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_cols_V_out_blk_n <= img_cols_V_out_full_n;
        else 
            img_cols_V_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_cols_V_out_din <= img_cols_V_dout;

    img_cols_V_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_rows_V_empty_n, img_cols_V_empty_n, img_rows_V_out_full_n, img_cols_V_out_full_n)
    begin
        if ((not(((img_cols_V_out_full_n = ap_const_logic_0) or (img_rows_V_out_full_n = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (img_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_cols_V_out_write <= ap_const_logic_1;
        else 
            img_cols_V_out_write <= ap_const_logic_0;
        end if; 
    end process;


    img_cols_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_rows_V_empty_n, img_cols_V_empty_n, img_rows_V_out_full_n, img_cols_V_out_full_n)
    begin
        if ((not(((img_cols_V_out_full_n = ap_const_logic_0) or (img_rows_V_out_full_n = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (img_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_cols_V_read <= ap_const_logic_1;
        else 
            img_cols_V_read <= ap_const_logic_0;
        end if; 
    end process;


    img_data_stream_0_V_blk_n_assign_proc : process(img_data_stream_0_V_full_n, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_i_reg_427)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_i_reg_427 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            img_data_stream_0_V_blk_n <= img_data_stream_0_V_full_n;
        else 
            img_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_data_stream_0_V_din <= ap_phi_mux_p_Val2_s_phi_fu_264_p4(8 - 1 downto 0);

    img_data_stream_0_V_write_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_i_reg_427, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_i_reg_427 = ap_const_lv1_0))) then 
            img_data_stream_0_V_write <= ap_const_logic_1;
        else 
            img_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    img_data_stream_1_V_blk_n_assign_proc : process(img_data_stream_1_V_full_n, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_i_reg_427)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_i_reg_427 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            img_data_stream_1_V_blk_n <= img_data_stream_1_V_full_n;
        else 
            img_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_data_stream_1_V_din <= ap_phi_mux_p_Val2_s_phi_fu_264_p4(15 downto 8);

    img_data_stream_1_V_write_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_i_reg_427, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_i_reg_427 = ap_const_lv1_0))) then 
            img_data_stream_1_V_write <= ap_const_logic_1;
        else 
            img_data_stream_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    img_data_stream_2_V_blk_n_assign_proc : process(img_data_stream_2_V_full_n, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_i_reg_427)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_i_reg_427 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            img_data_stream_2_V_blk_n <= img_data_stream_2_V_full_n;
        else 
            img_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_data_stream_2_V_din <= ap_phi_mux_p_Val2_s_phi_fu_264_p4(23 downto 16);

    img_data_stream_2_V_write_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_i_reg_427, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_i_reg_427 = ap_const_lv1_0))) then 
            img_data_stream_2_V_write <= ap_const_logic_1;
        else 
            img_data_stream_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    img_rows_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_rows_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_rows_V_blk_n <= img_rows_V_empty_n;
        else 
            img_rows_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_rows_V_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_rows_V_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_rows_V_out_blk_n <= img_rows_V_out_full_n;
        else 
            img_rows_V_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_rows_V_out_din <= img_rows_V_dout;

    img_rows_V_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_rows_V_empty_n, img_cols_V_empty_n, img_rows_V_out_full_n, img_cols_V_out_full_n)
    begin
        if ((not(((img_cols_V_out_full_n = ap_const_logic_0) or (img_rows_V_out_full_n = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (img_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_rows_V_out_write <= ap_const_logic_1;
        else 
            img_rows_V_out_write <= ap_const_logic_0;
        end if; 
    end process;


    img_rows_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_rows_V_empty_n, img_cols_V_empty_n, img_rows_V_out_full_n, img_cols_V_out_full_n)
    begin
        if ((not(((img_cols_V_out_full_n = ap_const_logic_0) or (img_rows_V_out_full_n = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (img_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_rows_V_read <= ap_const_logic_1;
        else 
            img_rows_V_read <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(exitcond5_i_fu_325_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond5_i_fu_325_p2 = ap_const_lv1_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    j_V_fu_341_p2 <= std_logic_vector(unsigned(t_V_3_reg_202) + unsigned(ap_const_lv32_1));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_user_V_fu_316_p1 <= AXI_video_strm_V_user_V_dout;
end behav;
